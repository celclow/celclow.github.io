{"version":3,"sources":["MusicTable.js","App.js","serviceWorker.js","index.js"],"names":["MusicTable","props","state","musicList","diffType","keyType","this","fetchDjmaxtrMusicList","fetch","then","res","json","setState","Paper","Table","TableHead","TableRow","TableCell","rowSpan","map","key","colSpan","length","toUpperCase","diff","TableBody","music","id","title","href","YouTube","className","Component","App","theme","createMuiTheme","overrides","MuiTableCell","root","padding","margin","head","body","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8XA0FeA,G,kBA/Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,UAAW,IAGb,EAAKC,SAAW,CAAC,KAAM,KAAM,KAAM,MACnC,EAAKC,QAAU,CAAC,KAAM,KAAM,KAAM,KAAM,MARvB,E,kFAajBC,KAAKC,0B,8CAIkB,IAAD,OACtBC,MACE,kFAECC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJ,EAAKE,SAAS,CACZT,UAAWO,S,+BAKT,IAAD,OACP,OACE,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,QAAS,GAApB,SACCZ,KAAKD,QAAQc,KAAI,SAAAC,GAAG,OACnB,kBAACH,EAAA,EAAD,CAAWG,IAAKA,EAAKC,QAAS,EAAKjB,SAASkB,QACzCF,EAAIG,mBAIX,kBAACP,EAAA,EAAD,KACGV,KAAKD,QAAQc,KAAI,SAAAC,GAAG,OACnB,EAAKhB,SAASe,KAAI,SAAAK,GAAI,OACpB,kBAACP,EAAA,EAAD,CAAWG,IAAKA,EAAMI,GAAOA,EAAKD,uBAK1C,kBAACE,EAAA,EAAD,KACGnB,KAAKJ,MAAMC,UAAUgB,KAAI,SAAAO,GAAK,OAC7B,kBAACV,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWG,IAAKM,EAAMC,IAAKD,EAAME,OAEhC,EAAKvB,QAAQc,KAAI,SAAAC,GAAG,OACnB,EAAKhB,SAASe,KAAI,SAAAK,GAAI,OACpB,kBAACP,EAAA,EAAD,CAAWG,IAAKM,EAAMC,GAAKP,EAAMI,GAC9BE,EAAMN,GAAKI,IACV,uBAAGK,KAAMH,EAAMN,GAAKI,IAClB,kBAACM,EAAA,EAAD,CAASC,UAAU,oBAGD,KAArBL,EAAMN,GAAKI,IACV,kBAACM,EAAA,EAAD,CAASC,UAAU,oBAEC,OAArBL,EAAMN,GAAKI,IAAkB,qB,GAnE3BQ,cC6BVC,E,YAlCb,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDiC,MAAQC,YAAe,CAC1BC,UAAW,CACTC,aAAc,CACZC,KAAM,CACJC,QAAS,MACTC,OAAQ,OAEVC,KAAM,CACJF,QAAS,MACTC,OAAQ,OAEVE,KAAM,CACJH,QAAS,MACTC,OAAQ,WAhBC,E,sEAwBjB,OACE,yBAAKT,UAAU,OACb,kBAAC,IAAD,CAAkBG,MAAO5B,KAAK4B,OAC5B,kBAAC,EAAD,Y,GA5BQF,aCQEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.cb1608de.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { YouTube } from \"@material-ui/icons\";\nimport \"./MusicTable.css\";\n\nclass MusicTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      musicList: []\n    };\n\n    this.diffType = [\"nm\", \"hd\", \"mx\", \"sc\"];\n    this.keyType = [\"4k\", \"5k\", \"6k\", \"7k\", \"8k\"];\n  }\n\n  // 初期値の設定\n  componentWillMount() {\n    this.fetchDjmaxtrMusicList();\n  }\n\n  // リストの更新\n  fetchDjmaxtrMusicList() {\n    fetch(\n      \"https://cdn.jsdelivr.net/gh/celclow/djmaxtr-music-list/djmaxtr_music_list.json\"\n    )\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          musicList: res\n        });\n      });\n  }\n\n  render() {\n    return (\n      <Paper>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell rowSpan={2}>Title</TableCell>\n              {this.keyType.map(key => (\n                <TableCell key={key} colSpan={this.diffType.length}>\n                  {key.toUpperCase()}\n                </TableCell>\n              ))}\n            </TableRow>\n            <TableRow>\n              {this.keyType.map(key =>\n                this.diffType.map(diff => (\n                  <TableCell key={key + diff}>{diff.toUpperCase()}</TableCell>\n                ))\n              )}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.state.musicList.map(music => (\n              <TableRow>\n                <TableCell key={music.id}>{music.title}</TableCell>\n\n                {this.keyType.map(key =>\n                  this.diffType.map(diff => (\n                    <TableCell key={music.id + key + diff}>\n                      {music[key][diff] && (\n                        <a href={music[key][diff]}>\n                          <YouTube className=\"youtube-enable\" />\n                        </a>\n                      )}\n                      {music[key][diff] === \"\" && (\n                        <YouTube className=\"youtube-disable\" />\n                      )}\n                      {music[key][diff] === null && \"\"}\n                    </TableCell>\n                  ))\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n    );\n  }\n}\n\nexport default MusicTable;\n","import React, { Component } from \"react\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport MusicTable from \"./MusicTable\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.theme = createMuiTheme({\n      overrides: {\n        MuiTableCell: {\n          root: {\n            padding: \"3px\",\n            margin: \"1px\"\n          },\n          head: {\n            padding: \"3px\",\n            margin: \"1px\"\n          },\n          body: {\n            padding: \"3px\",\n            margin: \"1px\"\n          }\n        }\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MuiThemeProvider theme={this.theme}>\n          <MusicTable />\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}